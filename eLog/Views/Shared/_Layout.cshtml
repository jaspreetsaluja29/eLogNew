@inject Microsoft.Extensions.Configuration.IConfiguration Configuration

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - DigitalLog</title>

    @{
        var basePath = Configuration["BasePath"] ?? "/";
    }
    @{
        TempData.Keep("UserID");
        TempData.Keep("UserName");
        TempData.Keep("UserRoleName");
    }

    <base href="@basePath">

    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/eLog.styles.css" asp-append-version="true" />
    <style>
        .notification-sidebar {
            position: fixed;
            top: 0;
            right: -350px;
            width: 350px;
            height: 100%;
            background-color: #f8f9fa;
            box-shadow: -2px 0 5px rgba(0,0,0,0.5);
            padding: 0;
            transition: right 0.3s ease-in-out;
            z-index: 1050;
            display: flex;
            flex-direction: column;
        }

            .notification-sidebar.show {
                right: 0;
            }

        .sidebar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #ddd;
            padding: 15px 20px;
            background-color: #fff;
            flex-shrink: 0;
        }

        .notification-content {
            flex: 1;
            overflow-y: auto;
            padding: 0;
        }

        .notification-item {
            border-bottom: 1px solid #eee;
            padding: 15px 20px;
            cursor: pointer;
            transition: background-color 0.2s;
            position: relative;
        }

            .notification-item:hover {
                background-color: #e9ecef;
            }

            .notification-item.unread {
                background-color: #fff3cd;
                border-left: 4px solid #ffc107;
            }

                .notification-item.unread::before {
                    content: '';
                    position: absolute;
                    top: 15px;
                    right: 15px;
                    width: 8px;
                    height: 8px;
                    background-color: #dc3545;
                    border-radius: 50%;
                }

        .notification-message {
            font-size: 14px;
            line-height: 1.4;
            margin-bottom: 5px;
        }

        .notification-date {
            font-size: 12px;
            color: #6c757d;
        }

        .notification-actions {
            padding: 15px 20px;
            border-top: 1px solid #ddd;
            background-color: #fff;
            flex-shrink: 0;
        }

        .notification-badge {
            background-color: #dc3545 !important;
            color: white !important;
            font-size: 11px;
            min-width: 18px;
            height: 18px;
            border-radius: 9px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            margin-left: 5px;
        }

        .dropdown-menu .dropdown-item:hover {
            font-weight: bold;
            background-color: #e9ecef;
            color: #000;
        }

        .empty-notifications {
            text-align: center;
            padding: 40px 20px;
            color: #6c757d;
        }

            .empty-notifications i {
                font-size: 48px;
                margin-bottom: 15px;
                opacity: 0.5;
            }
    </style>
</head>
<body>
    <!-- Store user info in hidden fields for JavaScript access -->
    <input type="hidden" id="hiddenUserId" value="@TempData.Peek("UserID")" />
    <input type="hidden" id="hiddenUserName" value="@TempData.Peek("UserName")" />
    <input type="hidden" id="hiddenUserRole" value="@TempData.Peek("UserRoleName")" />

    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand d-flex align-items-center">
                    <img src="~/image/logo.png" alt="Logo" class="navbar-logo me-2" id="navbarLogo" />
                    <span class="fw-bold">DigitalLog</span>
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle text-dark fw-bold" href="#" id="orb1Dropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                ORB 1
                            </a>
                            <ul class="dropdown-menu" aria-labelledby="orb1Dropdown">
                                <li><a class="dropdown-item" asp-controller="FirstPageCapacity" asp-action="FirstPageCapacity">Tank Capacity</a></li>
                                <li><a class="dropdown-item" asp-controller="ORB1" asp-action="CodeA">Code A</a></li>
                                <li><a class="dropdown-item" asp-controller="ORB1" asp-action="CodeB">Code B</a></li>
                                <li><a class="dropdown-item" asp-controller="ORB1" asp-action="CodeC">Code C</a></li>
                                <li><a class="dropdown-item" asp-controller="ORB1" asp-action="CodeD">Code D</a></li>
                                <li><a class="dropdown-item" asp-controller="ORB1" asp-action="CodeE">Code E</a></li>
                                <li><a class="dropdown-item" asp-controller="ORB1" asp-action="CodeF">Code F</a></li>
                                <li><a class="dropdown-item" asp-controller="ORB1" asp-action="CodeG">Code G</a></li>
                                <li><a class="dropdown-item" asp-controller="ORB1" asp-action="CodeH">Code H</a></li>
                                <li><a class="dropdown-item" asp-controller="ORB1" asp-action="CodeI">Code I</a></li>
                            </ul>
                        </li>
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle text-dark fw-bold" href="#" id="reportDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                Reports
                            </a>
                            <ul class="dropdown-menu" aria-labelledby="reportDropdown">
                                <li><a class="dropdown-item" asp-controller="Reports" asp-action="LatestInventoryTanks">Latest Inventory of Tanks</a></li>
                                <li><a class="dropdown-item" asp-controller="Reports" asp-action="HistoryForTanks">History For Tanks</a></li>
                                <li><a class="dropdown-item" asp-controller="Reports" asp-action="BunkeringData">Bunkering Data</a></li>
                            </ul>
                        </li>
                    </ul>

                    <!-- Notification Icon -->
                    @if (TempData["UserRoleName"]?.ToString() == "Level 2- Approver")
                    {
                        <ul class="navbar-nav">
                            <li class="nav-item">
                                <a class="nav-link text-dark position-relative" href="javascript:void(0);" id="notificationIcon" role="button">
                                    🔔
                                    <span id="notificationCount" class="notification-badge">0</span>
                                </a>
                            </li>
                        </ul>
                    }

                    <!-- User Profile Section -->
                    <ul class="navbar-nav">
                        @if (TempData["UserID"] != null)
                        {
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle text-dark fw-bold" href="#" id="userDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    👤 @TempData["UserName"] (@TempData["UserRoleName"])
                                </a>
                                <ul class="dropdown-menu" aria-labelledby="userDropdown">
                                    <li><a class="dropdown-item" asp-controller="Account" asp-action="Reset">Logout</a></li>
                                </ul>
                            </li>
                        }
                        else
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="Account" asp-action="Login">Login</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <!-- Notification Sidebar -->
    <div id="notificationSidebar" class="notification-sidebar">
        <div class="sidebar-header">
            <h5 class="mb-0">Notifications</h5>
            <button id="closeSidebar" class="btn-close"></button>
        </div>
        <div class="notification-content" id="notificationContent">
            <div class="empty-notifications" id="emptyNotifications">
                <div>📬</div>
                <div>No notifications</div>
            </div>
        </div>
        <div class="notification-actions">
            <button id="markAllRead" class="btn btn-sm btn-outline-primary w-100">Mark All as Read</button>
        </div>
    </div>

    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="footer-container">
            &copy; 2025 - eLog - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)

    <script>
        // Get user data from hidden fields
        var userId = parseInt(document.getElementById('hiddenUserId')?.value) || 0;
        var userName = document.getElementById('hiddenUserName')?.value || 'Guest';
        var userRoleName = document.getElementById('hiddenUserRole')?.value || 'Anonymous';
        var basePath = document.querySelector('base')?.getAttribute('href') || '/';

        // Ensure basePath ends with '/' for proper URL construction
        if (!basePath.endsWith('/')) {
            basePath += '/';
        }

        $(document).ready(function () {
            console.log('User ID:', userId, 'User Role:', userRoleName);

            // Only load notifications for Level 2 Approvers and valid user IDs
            if (userRoleName === 'Level 2- Approver' && userId > 0) {
                loadNotificationCount();

                // Refresh notification count every 30 seconds
                setInterval(loadNotificationCount, 30000);
            }

            // Show/hide notification sidebar
            $('#notificationIcon').click(function(event) {
                event.preventDefault();
                $('#notificationSidebar').toggleClass('show');
                if ($('#notificationSidebar').hasClass('show')) {
                    loadNotifications();
                }
            });

            $('#closeSidebar').click(function() {
                $('#notificationSidebar').removeClass('show');
            });

            // Mark all as read
            $('#markAllRead').click(function() {
                markAllAsRead();
            });

            // Close sidebar when clicking outside
            $(document).click(function(event) {
                if (!$(event.target).closest('#notificationSidebar, #notificationIcon').length) {
                    $('#notificationSidebar').removeClass('show');
                }
            });

            // Event delegation for notification clicks (this persists through DOM changes)
            $(document).on('click', '.notification-item', function() {
                var notificationId = $(this).attr('data-notification-id');
                var isRead = $(this).attr('data-is-read') === 'true';

                console.log('Notification clicked:', notificationId, 'IsRead:', isRead);

                if (!isRead && notificationId) {
                    markAsRead(parseInt(notificationId));
                }
            });
        });

        function loadNotificationCount() {
            if (userId <= 0) {
                console.log('Invalid user ID, skipping notification count load');
                return;
            }

            var url = basePath + "Notification/GetNotificationCount";
            console.log('Loading notification count from:', url, 'for userId:', userId);

            $.ajax({
                url: url,
                method: 'GET',
                data: { userId: userId },
                dataType: 'json',
                success: function (data) {
                    console.log('Notification count response:', data);
                    let unreadCount = data.unreadCount || 0;
                    let totalCount = data.totalCount || 0;

                    // Always show the badge, but style it differently
                    $('#notificationCount').text(unreadCount);
                    $('#notificationCount').show();

                    if (unreadCount > 0) {
                        $('#notificationCount').removeClass('bg-secondary').addClass('bg-danger');
                    } else {
                        $('#notificationCount').removeClass('bg-danger').addClass('bg-secondary');
                    }
                },
                error: function(xhr, status, error) {
                    console.error("Error loading notification count:", error);
                    console.error("Response:", xhr.responseText);
                    $('#notificationCount').text('!').show().removeClass('bg-secondary').addClass('bg-danger');
                }
            });
        }

        function loadNotifications() {
            if (userId <= 0) {
                showEmptyNotifications('Please log in to view notifications');
                return;
            }

            var url = basePath + "Notification/GetNotifications";
            console.log('Loading notifications from:', url, 'for userId:', userId);

            $.ajax({
                url: url,
                method: 'GET',
                data: { userId: userId },
                dataType: 'json',
                success: function (data) {
                    console.log('Notifications response:', data);
                    let notifications = data.notifications || [];
                    let content = $('#notificationContent');
                    content.empty();

                    if (notifications.length === 0) {
                        showEmptyNotifications('No notifications');
                    } else {
                        notifications.forEach(function(notification) {
                            var notificationDiv = $('<div class="notification-item"></div>');

                            // Add data attributes for identification
                            notificationDiv.attr('data-notification-id', notification.id);
                            notificationDiv.attr('data-is-read', notification.isRead);

                            if (!notification.isRead) {
                                notificationDiv.addClass('unread');
                            }

                            notificationDiv.html(`
                                <div class="notification-message">${notification.message}</div>
                                <div class="notification-date">${formatDate(notification.entryDate)}</div>
                            `);

                            content.append(notificationDiv);
                        });

                        $('#emptyNotifications').hide();
                    }
                },
                error: function(xhr, status, error) {
                    console.error("Error loading notifications:", error);
                    console.error("Response:", xhr.responseText);
                    showEmptyNotifications('Error loading notifications');
                }
            });
        }

        function markAsRead(notificationId) {
            console.log('Attempting to mark notification as read:', notificationId);
            var url = basePath + "Notification/MarkAsRead";

            $.ajax({
                url: url,
                method: 'POST',
                data: {
                    notificationId: notificationId,
                    userId: userId
                },
                dataType: 'json',
                success: function (data) {
                    console.log('Mark as read response:', data);
                    if (data.success) {
                        // Update the specific notification visually first for immediate feedback
                        var notificationElement = $(`[data-notification-id="${notificationId}"]`);
                        notificationElement.removeClass('unread');
                        notificationElement.attr('data-is-read', 'true');

                        // Then reload count and notifications
                        setTimeout(function() {
                            loadNotificationCount();
                            loadNotifications();
                        }, 100);
                    } else {
                        console.error('Failed to mark notification as read:', data.message);
                    }
                },
                error: function(xhr, status, error) {
                    console.error("Error marking notification as read:", error);
                    console.error("Response:", xhr.responseText);
                }
            });
        }

        function markAllAsRead() {
            var url = basePath + "Notification/MarkAllAsRead";

            $.ajax({
                url: url,
                method: 'POST',
                data: { userId: userId },
                dataType: 'json',
                success: function (data) {
                    if (data.success) {
                        // Reload notifications and count
                        loadNotifications();
                        loadNotificationCount();
                    }
                },
                error: function(xhr, status, error) {
                    console.error("Error marking all notifications as read:", error);
                }
            });
        }

        function showEmptyNotifications(message) {
            $('#notificationContent').html(`
                <div class="empty-notifications">
                    <div>📬</div>
                    <div>${message}</div>
                </div>
            `);
        }

        function formatDate(dateString) {
            var date = new Date(dateString);
            var now = new Date();
            var diffMs = now - date;
            var diffMins = Math.floor(diffMs / 60000);
            var diffHours = Math.floor(diffMins / 60);
            var diffDays = Math.floor(diffHours / 24);

            if (diffMins < 1) return 'Just now';
            if (diffMins < 60) return diffMins + ' min ago';
            if (diffHours < 24) return diffHours + ' hour' + (diffHours > 1 ? 's' : '') + ' ago';
            if (diffDays < 7) return diffDays + ' day' + (diffDays > 1 ? 's' : '') + ' ago';

            return date.toLocaleDateString();
        }
    </script>
</body>
</html>